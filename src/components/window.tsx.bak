'use client';

import React, { useState, useRef, useEffect, useCallback } from 'react';
import type { WindowInstance } from '@/types';
import { useWindows } from '@/contexts/window-context';
import { cn } from '@/lib/utils';
import { X, Minus, Square, Maximize, Minimize } from 'lucide-react';
import { motion } from 'framer-motion';

type WindowProps = WindowInstance;

const Window = (props: WindowProps) => {
  const {
    id, title, content, x, y, width, height, zIndex, isFocused, isMaximized
  } = props;
  
  const {
    closeWindow,
    focusWindow,
    updateWindowPosition,
    updateWindowSize,
    toggleMaximize,
    toggleMinimize,
  } = useWindows();

  const [size, setSize] = useState({ width, height });
  const [position, setPosition] = useState({ x, y });
  const [isResizing, setIsResizing] = useState(false);
  const [isDragging, setIsDragging] = useState(false);
  const [isMobile, setIsMobile] = useState(false);
  
  const windowRef = useRef<HTMLDivElement>(null);
  const headerRef = useRef<HTMLDivElement>(null);

  // Check if we're on mobile
  useEffect(() => {
    const checkMobile = () => {
      setIsMobile(window.innerWidth < 768);
    };
    
    checkMobile();
    window.addEventListener('resize', checkMobile);
    return () => window.removeEventListener('resize', checkMobile);
  }, []);

  // Adjust window size and position for mobile
  useEffect(() => { 
    if (isMobile) {
      // On mobile, make windows take up most of the screen
      setSize({ 
        width: Math.min(window.innerWidth - 20, 600), 
        height: Math.min(window.innerHeight - 100, 700) 
      });
      setPosition({ 
        x: Math.max(0, (window.innerWidth - Math.min(window.innerWidth - 20, 600)) / 2),
        y: 60 
      });
    } else {
      setSize({ width, height }); 
      setPosition({ x, y });
    }
  }, [width, height, x, y, isMobile]);

  const handleResizeStart = (e: React.MouseEvent<HTMLDivElement>) => {
    if (e.button !== 0) return;
    e.stopPropagation();
    focusWindow(id);
    setIsResizing(true);
  };
  
  const handleDoubleClick = (e: React.MouseEvent<HTMLDivElement>) => {
    if ((e.target as HTMLElement).closest('button')) {
      return;
    }
    toggleMaximize(id);
  }

  // Handle touch events for mobile dragging
  const handleTouchStart = (e: React.TouchEvent) => {
    e.stopPropagation();
    focusWindow(id);
    setIsDragging(true);
    
    const touch = e.touches[0];
    const windowRect = windowRef.current?.getBoundingClientRect();
    if (!windowRect) return;
    
    const offsetX = touch.clientX - windowRect.left;
    const offsetY = touch.clientY - windowRect.top;
    
    const handleTouchMove = (moveEvent: TouchEvent) => {
      if (!isDragging || !windowRef.current) return;
      
      const moveTouch = moveEvent.touches[0];
      const newX = moveTouch.clientX - offsetX;
      const newY = moveTouch.clientY - offsetY;
      
      // Keep window within bounds
      const boundedX = Math.max(0, Math.min(newX, window.innerWidth - windowRect.width));
      const boundedY = Math.max(0, Math.min(newY, window.innerHeight - windowRect.height));
      
      setPosition({ x: boundedX, y: boundedY });
    };
    
    const handleTouchEnd = () => {
      setIsDragging(false);
      updateWindowPosition(id, position.x, position.y);
      window.removeEventListener('touchmove', handleTouchMove);
      window.removeEventListener('touchend', handleTouchEnd);
    };
    
    window.addEventListener('touchmove', handleTouchMove);
    window.addEventListener('touchend', handleTouchEnd);
  };

  // Handle mouse events for desktop dragging
  const handleDragStart = (e: React.MouseEvent) => {
    if (e.button !== 0 || isMaximized) return;
    e.stopPropagation();
    focusWindow(id);
    setIsDragging(true);
  };

  const handleMouseMove = useCallback((e: MouseEvent) => {
    if (!isDragging && !isResizing) return;
    
    if (isDragging && windowRef.current) {
      const deltaX = e.movementX;
      const deltaY = e.movementY;
      
      setPosition(prev => ({
        x: Math.max(0, prev.x + deltaX),
        y: Math.max(0, prev.y + deltaY)
      }));
    }
    
    if (isResizing) {
      const newWidth = Math.max(300, size.width + e.movementX);
      const newHeight = Math.max(200, size.height + e.movementY);
      setSize({ width: newWidth, height: newHeight });
    }
  }, [isDragging, isResizing, size]);

  const handleMouseUp = useCallback(() => {
    if (isDragging) {
      setIsDragging(false);
      updateWindowPosition(id, position.x, position.y);
    }
    if (isResizing) {
      setIsResizing(false);
      updateWindowSize(id, size.width, size.height);
    }
  }, [isDragging, isResizing, id, position, size, updateWindowPosition, updateWindowSize]);

  useEffect(() => {
    if (isResizing || isDragging) {
      window.addEventListener('mousemove', handleMouseMove);
      window.addEventListener('mouseup', handleMouseUp);
    }
    return () => {
      window.removeEventListener('mousemove', handleMouseMove);
      window.removeEventListener('mouseup', handleMouseUp);
    };
  }, [isResizing, isDragging, handleMouseMove, handleMouseUp]);

  return (
    <motion.div
      ref={windowRef}
      className={cn(
        "fixed bg-background border border-border rounded-lg shadow-xl overflow-hidden flex flex-col select-none",
        isFocused ? "shadow-2xl" : "opacity-90"
      )}
      style={{
        width: size.width,
        height: size.height,
        zIndex,
        left: position.x,
        top: position.y,
      }}
      initial={{ opacity: 0, scale: 0.8 }}
      animate={{ opacity: 1, scale: 1 }}
      exit={{ opacity: 0, scale: 0.8 }}
      transition={{ duration: 0.2 }}
```

```typescript
c:\Users\rajath\Documents\GitHub\rajath_hegde\src\components/window.tsx
```javascript
<<<<<<< SEARCH
      >
      {/* Window Header */}
      <div
        ref={headerRef}
        className={cn(
          "flex items-center justify-between p-2 border-b border-border cursor-move",
          isFocused ? "bg-primary/10" : "bg-muted"
        )}
        onMouseDown={handleDragStart}
        onDoubleClick={handleDoubleClick}
        onTouchStart={handleTouchStart}
      >
        <div className="flex items-center gap-2">
          <div className="flex gap-1.5">
            <button
              className="w-6 h-6 flex items-center justify-center rounded-full bg-red-500 hover:bg-red-600 text-white text-xs focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-1"
              onClick={() => closeWindow(id)}
              aria-label="Close window"
            >
              <X size={14} />
            </button>
            <button
              className="w-6 h-6 flex items-center justify-center rounded-full bg-yellow-500 hover:bg-yellow-600 text-white text-xs focus:outline-none focus:ring-2 focus:ring-yellow-500 focus:ring-offset-1"
              onClick={() => toggleMinimize(id)}
              aria-label="Minimize window"
            >
              <Minus size={14} />
            </button>
            <button
              className="w-6 h-6 flex items-center justify-center rounded-full bg-green-500 hover:bg-green-600 text-white text-xs focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-offset-1"
              onClick={() => toggleMaximize(id)}
              aria-label={isMaximized ? "Restore window" : "Maximize window"}
            >
              {isMaximized ? <Minimize size={14} /> : <Square size={14} />}
            </button>
          </div>
          <span className="text-sm font-medium truncate max-w-[160px] sm:max-w-xs">
            {title}
          </span>
        </div>
      </div>

      {/* Window Content */}
      <div className="flex-1 overflow-auto">
        {content && React.createElement(content, { id })}
      </div>

      {/* Resize Handle */}
      {!isMaximized && (
        <div
          className={cn(
            "absolute bottom-0 right-0 w-4 h-4 cursor-nwse-resize",
            "bg-primary/20 hover:bg-primary/40 active:bg-primary/60 transition-colors"
          )}
          onMouseDown={handleResizeStart}
        >
          <div className="absolute bottom-1 right-1 w-2 h-2 border-r-2 border-b-2 border-primary/60" />
        </div>
      )}
    </motion.div>
  );
};

export default Window;